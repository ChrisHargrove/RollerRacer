////////////////////////////////////////////////////////////
// StateManager
// Author - Chris Hargrove
// Date   - 23/03/2018
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <map>
#include <stack>
#include "State.h"
#include "LogManager.h"

////////////////////////////////////////////////////////////
// Handles all game states and the changing of them. It also
// stores all the game states so no need to pass them around.
// All that is needed is the name of the state to swap to it.
////////////////////////////////////////////////////////////
class StateManager
{
public:
    ////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////
    StateManager();

    ////////////////////////////////////////////////////////////
    /// Default Destructor
    ////////////////////////////////////////////////////////////
    ~StateManager();

    ////////////////////////////////////////////////////////////
    /// Runs input on the top state of the Active Stack.
    ////////////////////////////////////////////////////////////
    void Input();

    ////////////////////////////////////////////////////////////
    /// Runs update on the top state of the Active Stack.
    /// --delta-- Time elapsed since last frame.
    ////////////////////////////////////////////////////////////
    void Update(float delta);

    ////////////////////////////////////////////////////////////
    /// Runs render on the top state of the Active Stack.
    ////////////////////////////////////////////////////////////
    void Render();

    ////////////////////////////////////////////////////////////
    /// Shuts down the entire state machine, released all states
    /// memory and resources.
    ////////////////////////////////////////////////////////////
    bool Shutdown();

    ////////////////////////////////////////////////////////////
    /// Changes the current active state on the stack.
    /// --StateName-- Name of the state to change to.
    ////////////////////////////////////////////////////////////
    bool ChangeState(const std::string& StateName);

    ////////////////////////////////////////////////////////////
    /// Pushes a new state to the top of the stack.
    /// --StateName-- Name of the state to change to.
    ////////////////////////////////////////////////////////////
    bool PushState(const std::string& StateName);

    ////////////////////////////////////////////////////////////
    /// Removes the currently active state from the top of Active
    /// stack.
    ////////////////////////////////////////////////////////////
    bool PopState();

    ////////////////////////////////////////////////////////////
    /// Adds a state to the state list.
    /// --StateName-- Name of the state, which is used as a key.
    /// --NewState-- Pointer to the new state being added.
    ////////////////////////////////////////////////////////////
    bool AddState(std::string StateName, State* NewState);

    ////////////////////////////////////////////////////////////
    /// Gets the only instance of the State Manager
    ////////////////////////////////////////////////////////////
    static StateManager* Instance() {
        return &_Instance;
    }

private:
    ////////////////////////////////////////////////////////////
    // Member Variables.
    ////////////////////////////////////////////////////////////
    static StateManager _Instance;
    std::stack<State*> _ActiveStack;            //Active Stack of states.
    std::map<std::string, State*> _StateList;   //List of all states.
};

