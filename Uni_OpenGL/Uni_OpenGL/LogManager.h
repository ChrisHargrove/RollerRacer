////////////////////////////////////////////////////////////
//
// Log Manager
// Author - Chris Hargrove
// Date   - 10/10/2017
//
////////////////////////////////////////////////////////////
#ifndef LOG_MANAGER_H
#define LOG_MANAGER_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <ctime>
#include <string>
#include <fstream>
#include <iostream>

////////////////////////////////////////////////////////////
/// Engine Logging Manager
/// --Handles the logging of all errors and debug info that
/// --occurs during runtime. Outputs log to a .log file.
////////////////////////////////////////////////////////////
class LogManager
{
public:
	

	////////////////////////////////////////////////////////////
	/// Gets the current time and returns it as a string.
	////////////////////////////////////////////////////////////
	const std::string getCurrTime();

	////////////////////////////////////////////////////////////
	/// Logs basic information to the logs, with [INFO] prefix
	/// --Message-- The message to be written to the log.
	////////////////////////////////////////////////////////////
	void LogInfo(const std::string& Message);

	////////////////////////////////////////////////////////////
	/// Logs basic information to the logs, with [DEBUG] prefix
	/// --Message-- The message to be written to the log.
	////////////////////////////////////////////////////////////
	void LogDebug(const std::string& Message);

	////////////////////////////////////////////////////////////
	/// Logs basic information to the logs, with [WARNING] prefix
	/// --Message-- The message to be written to the log.
	////////////////////////////////////////////////////////////
	void LogWarning(const std::string& Message);

	////////////////////////////////////////////////////////////
	/// Logs basic information to the logs, with [ERROR] prefix
	/// --Message-- The message to be written to the log.
	////////////////////////////////////////////////////////////
	void LogError(const std::string& Message);

	////////////////////////////////////////////////////////////
	/// Logs basic information to the logs, prefixes with a tag,
	/// and the current time.
	///
	/// --Tag-- The tag to be prefixed before message.
	/// --Message-- The message to be written to the log.
	///
	////////////////////////////////////////////////////////////
	void LogMessage(const std::string& Tag, const std::string& Message);

	////////////////////////////////////////////////////////////
	/// Provides access to the only instance of the log
	/// manager.
	////////////////////////////////////////////////////////////
	static LogManager* Instance() {
		return &_Instance;
	};

private:
	////////////////////////////////////////////////////////////
	// Member Data
	////////////////////////////////////////////////////////////
	static LogManager _Instance; // Static Instance of ScreenManager

	std::ofstream*   _LogStream; // Output file stream for the log.

	LogManager();
	~LogManager();
	LogManager(const LogManager&) {}
};

#endif