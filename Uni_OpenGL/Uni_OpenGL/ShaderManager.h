////////////////////////////////////////////////////////////
//
// ShaderManager
// Author - Chris Hargrove
// Date   - 07/11/2017
//
////////////////////////////////////////////////////////////
#ifndef SHADER_MANAGER_H
#define SHADER_MANAGER_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <map>
#include "Shaders\Shader.h"

////////////////////////////////////////////////////////////
/// Engine ShaderManager
/// --Handles adding new shaders to the engine and storing them.
/// --Stores shaders in std::map using string key, key can be used
/// --to add and retrieve shader.
////////////////////////////////////////////////////////////
class ShaderManager
{
public:
	////////////////////////////////////////////////////////////
	/// Adds a new shader to the manager.
	/// --Key-- The key to store the shader to.
	/// --FileName-- The file name of shader without path or extension.
	////////////////////////////////////////////////////////////
	void AddShader(std::string Key, std::string FileName);

	////////////////////////////////////////////////////////////
	/// Sets the specified shader to be one currently in use.
	/// --Key-- The key to retrieve data.
	////////////////////////////////////////////////////////////
	void UseShader(std::string Key);

	////////////////////////////////////////////////////////////
	/// Gets the specified shader and returns it.
	/// --Key-- The key to retrieve data.
	////////////////////////////////////////////////////////////
	Shader* GetShader(std::string Key);

	std::map<std::string, Shader*>* GetShaderList();

	////////////////////////////////////////////////////////////
	/// Provides access to the only instance of the shader
	/// manager.
	////////////////////////////////////////////////////////////
	static ShaderManager* Instance() {
		return &_Instance;
	};

private:
	////////////////////////////////////////////////////////////
	// Member Data
	////////////////////////////////////////////////////////////
	static ShaderManager _Instance; // Static Instance of ShaderManager

	std::string _CurrentShader;		// The currently used shader.
	std::map<std::string, Shader*> _Shaders; // The Map of Shaders in the manager.

	ShaderManager();
	~ShaderManager();
	ShaderManager(const ShaderManager&) {}
};

#endif
