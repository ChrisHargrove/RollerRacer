////////////////////////////////////////////////////////////
// Game Engine
// Author - Chris Hargrove
// Date   - 23/03/2018
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <string>

////////////////////////////////////////////////////////////
/// Handles the core game loop and calling to the state manager
////////////////////////////////////////////////////////////
class Engine
{
public:
    ////////////////////////////////////////////////////////////
    /// Default constructor
    ////////////////////////////////////////////////////////////
    Engine();

    ////////////////////////////////////////////////////////////
    /// Default Destructor
    ////////////////////////////////////////////////////////////
    ~Engine();

    ////////////////////////////////////////////////////////////
    /// Initializes the game engine.
    /// --Width-- The width of the game window.
    /// --Height-- The height of the game window.
    /// --Title-- The title to be displayed at top of window.
    ////////////////////////////////////////////////////////////
    bool Initialize(int Width, int Height, std::string Title);

    ////////////////////////////////////////////////////////////
    /// Calls input from state manager.
    ////////////////////////////////////////////////////////////
    void Input();

    ////////////////////////////////////////////////////////////
    /// Calls update from state manager.
    /// --delta-- Time elapsed since last frame.
    ////////////////////////////////////////////////////////////
    void Update(float delta);

    ////////////////////////////////////////////////////////////
    /// Calls render from state manager.
    ////////////////////////////////////////////////////////////
    void Render();

    ////////////////////////////////////////////////////////////
    /// Calls shutdown from state manager, then releases any
    /// resources from the game engine.
    ////////////////////////////////////////////////////////////
    bool Shutdown();
    
};

